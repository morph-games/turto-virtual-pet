(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const r of o.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function e(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(n){if(n.ep)return;n.ep=!0;const o=e(n);fetch(n.href,o)}})();class et{constructor(t){this.lastLoopTime=0,this.continueLoop=!0,this.looper=typeof t=="function"?t:()=>{},this.timeScale=1,this.tick=0}start(){this.lastLoopTime=performance.now(),this.continueLoop=!0,this.loopOnNextFrame()}setup(t){return this.looper=t,this}loopOnNextFrame(){this.continueLoop&&window.requestAnimationFrame(t=>{this.loop(t)})}loop(t){if(!this.continueLoop)return;const e=(t-this.lastLoopTime)/1e3*this.timeScale;this.tick>=Number.MAX_SAFE_INTEGER?this.tick=0:this.tick+=1;const s=this.looper(e,this.tick,t);this.lastLoopTime=t,this.continueLoop=!s,this.loopOnNextFrame()}contiue(){this.continueLoop=!0}stop(){this.continueLoop=!1}toggle(){return this.isLooping()?this.stop():this.start()}isLooping(){return this.continueLoop}changeTimeScale(t=1){this.timeScale=t}}const it=["Egg","Baby","Child","Teen","Adult","Senior","Ancient"],R=[5,60,120,120,240,240,360],st=[.1,.1,.3,.55,.7,.7,.6];function nt(i){let t=0,e;for(e=0;e<R.length;e++)if(t+=R[e],t>i)return e;return R.length-1}class ot{constructor(t){this.t=t,this.i=0}getName(){return it[this.i]}getLifecycleIndex(){return this.i}setLifecycleIndex(t){this.i=nt(t)}increment(t){this.t+=t,this.setLifecycleIndex(this.t)}getScaleMultiplier(){return st[this.i]}isEgg(){return this.i===0}isSenior(){return this.i===5}}class c{constructor(t=0,e=0){this.x=t,this.y=e}set({x:t,y:e}){return this.x=t||0,this.y=e||0,this}add({x:t,y:e}){return this.x+=t||0,this.y+=e||0,this}subtract({x:t,y:e}){return this.x-=t||0,this.y-=e||0,this}multiply(t){return this.x*=t||1,this.y*=t||1,this}reverse(){return this.multiply(-1)}getDistance({x:t,y:e}){return Math.sqrt(Math.pow(this.x-t,2)+Math.pow(this.y-e,2))}getUnitVector(t){let{x:e,y:s}=t;const n=Math.abs(this.getDistance(t));if(n===0)return new c(0,0);const o=e-this.x,r=s-this.y;return e=o/n,s=r/n,new c(e,s)}getPerpendicularVector(t=!1){return t?new c(-1*this.y,this.x):new c(this.y,-1*this.x)}getMagnitude(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}getMultiply(t){return new c(this.x*t,this.y*t)}clone(){return new c(this.x,this.y)}clear(){this.x=0,this.y=0}}const rt=Math.PI/2,V=1,_=2,F=3,w=4,T=null,d=null;function u(i){return Math.floor(Math.random()*i)+1}function at(i={},t={},e={},s=1,n=0){let{x:o,y:r}=t;return i.x&&(o+=i.x),i.y&&(r+=i.y),o-=e.x*s,r-=e.y*s,`translate(${o},${r}) rotate(${n} ${e.x} ${e.y})`}function G(i){return i.sort((t,e)=>e.happyValue-t.happyValue),i[0]}const q=0,$=1,N=2,I=3,v=4,ht=["status-good","status-neutral","status-alert","status-warning","status-critical"];class lt{constructor(t,e){this.name=t,this.level=e}getName(){return this.level===v?this.name.toUpperCase()+"!":this.name}getHtml(t){const e=ht[this.level];return`<${t} class="${e}">${this.getName()}</${t}>`}}class ct{constructor(){this.color={r:u(150)+50,g:u(150)+70,b:u(150)+50},this.headColor={r:this.color.r+10,g:this.color.g+10,b:this.color.b+10},this.irisColor={r:u(150),g:u(150),b:u(150)},this.shellColor={r:50+Math.round(this.color.r/10),g:55+Math.round(this.color.g/10),b:55+Math.round(this.color.b/10)},this.stomachColor={r:50+Math.round(this.color.r/8),g:55+Math.round(this.color.g/8),b:55+Math.round(this.color.b/8)},this.age=new ot(0),this.maxHappiness=100,this.happiness=this.maxHappiness,this.boredomRate=1,this.maxHunger=100,this.hunger=0,this.hungerRate=2,this.bowels=0,this.digestionCooldown=0,this.maxHealth=100,this.health=this.maxHealth,this.sickness=0,this.vaccination=0,this.maxVaccination=100,this.maxEnergy=100,this.energy=this.maxEnergy,this.pos=new c(0,0),this.targetPos=d,this.speed=160,this.newTargetHeatup=0,this.eatingRange=30,this.eatingTime=2,this.actionCooldown=0,this.action=T,this.actionTarget=d,this.turn=0,this.rotation=0,this.bopT=0,this.squish=0,this.breathT=0,this.breathOffset=0,this.leftWalkOffset=0,this.rightWalkOffset=0,this.blinkTime=.5,this.blinkOpenTime=4,this.blinkCooldown=this.blinkTime,this.eyeOpen=!0,this.eyeOpenAmount=1,this.scale=this.age.getScaleMultiplier(),this.size=new c(300,300),this.halfSize=this.size.getMultiply(.5),this.maxMouthWidth=40+u(200),this.mouthWidth=this.maxMouthWidth,this.mouthT=0,this.maxMouthHeight=40+u(30),this.mouthHeight=this.maxMouthHeight,this.maxEyeHeight=60,this.lastChanceOfSickness=0}getStatuses(){const t=[];function e(a,g){t.push(new lt(a,g))}this.dead()?e("Dead",v):(this.action===V&&e("Eating",$),this.action===_&&e("Following",$),this.action===F&&e("Sitting",$),this.action===w&&e("Sleeping",$));const s=this.hungry()?"Hungy":"Full";e(s,this.getStatusLevel(this.hunger,this.maxHunger,-1));const n=this.unhealthy()?"Unhealthy":"Healthy";e(n,this.getStatusLevel(this.health,this.maxHealth,1));const o=this.happy()?"Happy":this.unhappy()?"Unhappy":"Content";e(o,this.getStatusLevel(this.happiness,this.maxHappiness,1));const r=this.tired()?"Tired":"Rested";return e(r,this.getStatusLevel(this.energy,this.maxEnergy,1)),this.vaccination===0&&e("Unvaccinated",N),this.sick()&&e("Sick",this.sickness>50?v:I),t}getAge(){return Math.round(this.age.t)}getLifecycleName(){return this.age.getName()}getStatusLevel(t,e,s){if(s>0){if(t<e*(1/2)){let n=N;return t<e*(3/4)&&(n=I,t<e*(7/8)&&(n=v)),n}else if(t>e*(1/7))return q}else if(t>e*(1/2)){let n=N;return t>e*(3/4)&&(n=I,t>e*(7/8)&&(n=v)),n}else if(t<e*(1/7))return q;return $}dead(){return this.health<=0}damage(t=1){return this.addHealth(-t)}addHealth(t=1){const e=this.health;return this.health=Math.min(Math.max(0,this.health+t),this.maxHealth),this.health-e}addHunger(t=1){const e=this.hunger;return this.hunger=Math.min(Math.max(0,this.hunger+t),this.maxHunger),this.hunger-e}addHappiness(t=1){const e=this.happiness;return this.happiness=Math.min(Math.max(0,this.happiness+t),this.maxHappiness),this.happiness-e}addSickness(t=0){const e=this.sickness;return this.sickness=Math.max(0,this.sickness+t),this.sickness-e}addVaccination(t=0){const e=this.vaccination;return this.vaccination=Math.min(Math.max(0,this.vaccination+t),this.maxVaccination),this.vaccination-e}addEnergy(t=1){const e=this.energy;return this.energy=Math.min(Math.max(0,this.energy+t),this.maxEnergy),this.energy-e}couldEat(){return this.hunger>this.maxHunger*(1/4)}hungry(){return this.hunger>this.maxHunger*(1/2)}sick(){return this.sickness>0}unhealthy(){return this.health<this.maxHealth*(1/2)}tired(){return this.energy<this.maxEnergy*.5}unhappy(){return this.happiness<=40}happy(){return this.happiness>=60}come(t){this.setTargetPos(t),this.setAction(_,d,5)}sit(){this.clearTarget(),this.setAction(F,d,5),this.leftWalkOffset=-50,this.rightWalkOffset=-50}pet(){this.addHappiness(10)}vaccinate(){this.addHappiness(-100),this.addSickness(-1),this.addVaccination(40)}wantToPlanNewTarget(t){return u(1e3)+this.newTargetHeatup>990}planRandomTarget(t,e){if(!this.wantToPlanNewTarget(e))return this.newTargetHeatup+=e,!1;this.newTargetHeatup=0,this.assignRandomTarget(t)}setTargetPos({x:t,y:e}){this.turn=t<this.pos.x?-1:1,this.targetPos=new c(t,e)}clearTarget(){this.targetPos=d}assignRandomTarget(t){this.setTargetPos({x:u(t.x),y:u(t.y)})}planToEat(t){if(t.length<=0)return;const e=G(t);return e?(this.setTargetPos(e.pos),!0):!1}advance(t,e,s,n,o,r){if(t<0){console.warn("t < 0",t);return}if(this.dead())return!1;this.age.isEgg()?this.bop(t):(e%2===0&&!this.action&&this.think(t,s,n,o,r),this.move(t),this.act(t,n,o),this.environment(t,e,n),this.blink(t)),this.breathe(t),this.ageOlder(t)}breathe(t){this.breathT+=t,this.breathOffset=Math.sin(this.breathT*2)*8}blink(t=0){const e=this.action===w;this.blinkCooldown-=t,this.blinkCooldown<=0&&(this.eyeOpen=!this.eyeOpen,this.blinkCooldown=this.eyeOpen?this.blinkOpenTime+u(2):this.blinkTime);const s=e?0:this.eyeOpen?1:0;this.eyeOpenAmount+=(s-this.eyeOpenAmount)/2}think(t,e,s,n,o){const r=G(s);if(r&&this.pos.getDistance(r.pos)<=this.eatingRange&&!this.action){this.setAction(V,r,this.eatingTime);return}if(this.action===w&&this.energy===this.maxEnergy&&this.clearAction(),this.energy===0&&!o.isLightsOn){this.setAction(w,d,30);return}this.couldEat()&&this.planToEat(s)||this.planRandomTarget(e,t)}act(t,e,s){this.action===V?(this.chew(t),this.eat(t,this.actionTarget,e),this.removeItem(this.actionTarget,e)):this.action===w&&this.addEnergy(t*5),this.action&&this.cooldownAction(t),this.actionCooldown<=0&&(this.action=T,this.actionTarget=d)}setAction(t=T,e=d,s=0){this.action=t,this.actionTarget=e,this.actionCooldown=s}clearAction(){this.setAction(T,d,0)}cooldownAction(t){this.actionCooldown=Math.max(0,this.actionCooldown-t),this.actionCooldown<=0&&(this.action=T)}removeItem(t,e){if(!t)return!1;const s=e.findIndex(n=>t===n);s===-1&&console.warning("no item found to remove"),e.splice(s,1),this.actionTarget===t&&(this.actionTarget=d)}eat(t,e,s){if(!e)return!1;this.addHunger(-e.foodValue),this.addHealth(Math.round(e.foodValue/10)+e.medicalValue),this.addHappiness(e.happyValue);let n=e.contagion*1.5;e.contagion>0&&this.vaccination>0&&(n=0,this.addVaccination(-50)),this.addSickness(n-e.medicalValue),this.bowels+=e.foodValue+Math.abs(e.happyValue),this.digestionCooldown+=2}chew(t){this.turn=0,this.mouthT+=t*8,this.mouthHeight=(Math.sin(this.mouthT)+1)/2*this.maxMouthHeight}environment(t,e,s=[]){if(e%60!==0)return;const n=s.reduce((g,y)=>g+y.contagion,0);let o=this.age.isSenior()?8:1;const r=this.unhappy()?2:1;o=Math.min(o*r+n,100),this.action===w&&(o=o/2),u(100)<=o&&(this.vaccination>0?this.addVaccination(-50):this.addSickness(1)),this.lastChanceOfSickness=o}ageOlder(t){this.age.increment(t),this.hunger=Math.min(this.hunger+this.hungerRate*t,this.maxHunger);const e=this.hunger>=this.maxHunger;if(this.sick()||e){const s=t*.1,n=t*2;this.addHappiness(-t),this.addHealth(-1*(s+n))}else{const s=this.age.isSenior()?.1:1;this.addHealth(t*s),this.grow(t)}this.addHappiness(-1*(this.boredomRate*t)),this.addEnergy(-1*t)}grow(t){const e=this.age.getScaleMultiplier();if(this.scale===e)return;const s=e-this.scale;if(s<.001){this.scale=e;return}this.scale+=s/2*t}poop(t){const e=this.maxHunger/2,s=1;this.digestionCooldown=Math.max(0,this.digestionCooldown-s*t);const n=this.bowels>e&&this.digestionCooldown===0;return n&&(this.digestionCooldown=10,this.bowels-=Math.max(e,this.bowels/3),this.dead()&&(this.bowels=0,this.digestionCooldown=0)),n}put(t,e){this.pos.set({x:t,y:e})}move(t){if(!this.targetPos)return!1;const e=this.pos.getDistance(this.targetPos);if(e===0)return this.straighten(t),this.clearTarget(),!1;const s=Math.min(this.speed*t,e),n=this.pos.getUnitVector(this.targetPos);return this.pos.add(n.multiply(s)),this.bop(t),!0}straighten(t){this.bopT=0,this.squish=0;const e=Math.abs(this.rotation)*(t/100);if(e<.1){this.rotation=0;return}const s=this.rotation>0?-1:1;console.log(this.rotation,e,s),this.rotation+=e*s,this.leftWalkOffset=0,this.rightWalkOffset=0,this.turn=0}bop(t){this.bopT+=t,this.rotation=Math.sin(this.bopT)*12,this.squish=Math.sin(this.bopT+1)/10;const e=this.bopT*10;this.leftWalkOffset=Math.sin(e)*30,this.rightWalkOffset=Math.sin(e+rt)*30}rotate(t){this.rotation+=t}getRgbColor(t){return`rgb(${t.r}, ${t.g}, ${t.b})`}getHeadSvg(){const t=this.getRgbColor(this.headColor),e=this.halfSize.x+this.turn*30,s=0+this.breathOffset;return`
			<g class="monster-head" transform="translate(${e}, ${s})">
				<ellipse cx="0" cy="0" rx="170" ry="150" fill="${t}" />
				${this.getMouthSvg()}
				${this.getEyesSvg()}
			</g>
		`}getMouthSvg(){const t=this.getRgbColor(this.headColor),e=this.mouthWidth/2,s=80,n=s+this.mouthHeight+10;return`
			<g class="monster-mouth" transform="translate(${this.turn*20}, 0)">
				<path d="m -${e} ${s}
					l ${this.mouthWidth} 0
					l -${e} ${this.mouthHeight}
					l -${e} -${this.mouthHeight}"
					fill="black"
					stroke="${t}" stroke-width="5" />
				<ellipse cx="0" cy="${n}" rx="30" ry="22" fill="${t}" />
			</g>
		`}getEyeHeight(t){let e=100;this.sick()&&(e-=20),this.hungry()&&(e-=20),this.unhealthy()&&(e-=20),this.unhappy()&&(e-=20),this.tired()&&(e-=20);const s=t+e/100*(this.maxEyeHeight-t);return this.eyeOpenAmount*s}getEyesSvg(){if(this.dead())return this.getDeadEyesSvg();this.getRgbColor(this.headColor);const t=this.getRgbColor(this.color),e=20,s=this.getEyeHeight(20),n=s<e?"":this.getEyeballsSvg();return`
			<g class="monster-eyes" transform="translate(${this.turn*20}, 0)">
				<ellipse cx="100" cy="0" rx="60" ry="${s}" fill="white" />
				<ellipse cx="-100" cy="0" rx="60" ry="${s}" fill="white"" />
				${n}
				<ellipse cx="100" cy="0" rx="60" ry="${s}" fill="transparent" stroke="${t}" stroke-width="20" />
				<ellipse cx="-100" cy="0" rx="60" ry="${s}" fill="transparent" stroke="${t}" stroke-width="20" />
			</g>
		`}getEyeballsSvg(){const t=this.getRgbColor(this.irisColor);return`
			<ellipse cx="120" cy="0" rx="12" ry="12" fill="black" stroke="${t}" stroke-width="10" />
			<ellipse cx="115" cy="-5" rx="4" ry="4" fill="rgba(255,255,255,0.5)" />

			<ellipse cx="-120" cy="0" rx="12" ry="12" fill="black" stroke="${t}" stroke-width="10" />
			<ellipse cx="-125" cy="-5" rx="4" ry="4" fill="rgba(255,255,255,0.5)" />
		`}getDeadEyesSvg(){return`
			<g class="monster-eyes">
				<ellipse cx="100" cy="0" rx="60" ry="${this.maxEyeHeight}" fill="rgba(0,0,0,0.2)" />
				<ellipse cx="-100" cy="0" rx="60" ry="${this.maxEyeHeight}" fill="rgba(0,0,0,0.2)" />
				<g class="monster-dead-eye" transform="translate(0, 40) rotate(45 100 100)">
					<rect x="0" y="-50" rx="10" ry="10" width="10" height="100" fill="#000" />
					<rect x="-50" y="0" rx="10" ry="10" width="100" height="10" fill="#000" />
				</g>
				<g class="monster-dead-eye" transform="translate(-200, 40) rotate(45 100 100)">
					<rect x="0" y="-50" rx="10" ry="10" width="10" height="100" fill="#000" />
					<rect x="-50" y="0" rx="10" ry="10" width="100" height="10" fill="#000" />
				</g>
			</g>
		`}getBodySvg(){const t=this.getRgbColor(this.color),e=this.getRgbColor(this.shellColor),s=40+this.breathOffset,n=0-this.breathOffset,o=200+this.breathOffset*2,r=30+this.rightWalkOffset/2,a=30+this.leftWalkOffset/2,g=30+this.leftWalkOffset,y=30+this.rightWalkOffset;return`
			<g class="monster-body" transform="translate(50 50)">
				<ellipse cx="100" cy="100" rx="130" ry="150" fill="${e}" />
				<rect x="${n}" y="0" rx="50" ry="50" width="${o}" height="200" fill="${t}" /> 
				<path d="M 0 ${s} l -70 ${r} l -10 30" fill="transparent" stroke="${t}" stroke-width="60" stroke-linecap="round" />

				<path d="M 200 ${s} l 70 ${a} l 10 30" fill="transparent" stroke="${t}" stroke-width="60" stroke-linecap="round" />

				<path d="M 20 200 l -40 ${g} l -10 30" fill="transparent" stroke="${t}" stroke-width="60" stroke-linecap="round" />

				<path d="M 180 200 l 40 ${y} l 10 30" fill="transparent" stroke="${t}" stroke-width="60" stroke-linecap="round" />
				
			</g>
		`}getEggSvg(){return`
			<g class="monster-egg">
				<ellipse cx="0" cy="0" rx="200" ry="260" fill="${this.getRgbColor(this.color)}" />
				<ellipse cx="-70" cy="-80" rx="100" ry="140" fill="rgba(255,255,255,0.2)" />
				<ellipse cx="-30" cy="-40" rx="140" ry="180" fill="rgba(255,255,255,0.2)" />
			</g>
		`}getSvg(t,e="",s=""){const n=at(t,this.pos,this.halfSize,this.scale,this.rotation),o=this.scale,r=(1-this.squish)*this.scale,a=this.age.isEgg()?this.getEggSvg():this.getBodySvg()+this.getHeadSvg();return`
			<g class="${e} monster" transform="${n} scale(${o} ${r})"
				style="filter:url(#shadow);">
				${a}
			</g>
		`}}let ut=0;const f={snack:{foodValue:20,happyValue:5,medicalValue:0,contagion:0,decayCooldown:30},meal:{foodValue:40,happyValue:1,medicalValue:0,contagion:0,decayCooldown:20},treat:{foodValue:1,happyValue:10,medicalValue:0,contagion:0,decayCooldown:40},meds:{foodValue:0,happyValue:-20,medicalValue:12,contagion:0,decayCooldown:120},poop:{foodValue:0,happyValue:-50,medicalValue:0,contagion:8,decayCooldown:10}};class U{constructor(t,e){this.id=ut++,this.pos=new c,t&&this.pos.set(t),this.type=e,this.foodValue=f[e]?f[e].foodValue:0,this.happyValue=f[e]?f[e].happyValue:0,this.medicalValue=f[e]?f[e].medicalValue:0,this.contagion=f[e]?f[e].contagion:0,this.tilt=Math.round(Math.random()*90)-45,this.decayCooldown=f[e]?f[e].decayCooldown:0}decay(t){this.decayCooldown-=t}isDecayed(){return this.decayCooldown<=0}isDecaying(){return this.decayCooldown<=5}getOpacity(){return this.decayCooldown>5?1:Math.max(0,this.decayCooldown/5)}zap(t=1){this.decayCooldown-=t}getTypeSvg(){switch(this.type){case"snack":return`
					<g transform="rotate(${this.tilt}, 0, 0)">
						<ellipse cx="0" cy="-10" rx="16" ry="18" fill="rgb(200,140,100)" />
						<ellipse cx="0" cy="20" rx="16" ry="18" fill="rgb(200,140,100)" />
					</g>
				`;case"treat":return`
					<g transform="rotate(${this.tilt}, 0, 0)">
						<path d="M 0 0 l -30 -16 l 0 32" fill="rgb(0,130,190)" />
						<path d="M 0 0 l 30 -16 l 0 32" fill="rgb(0,130,190)" />
						<ellipse cx="0" cy="0" rx="18" ry="18" fill="rgb(0,140,200)" />
					</g>
				`;case"meal":return`
					<ellipse cx="0" cy="0" rx="30" ry="24" fill="rgb(40,210,90)" />
					<ellipse cx="0" cy="0" rx="32" ry="20" fill="rgb(50,220,100)" transform="rotate(${this.tilt}, 0, 0)" />
					<ellipse cx="0" cy="0" rx="20" ry="5" fill="rgb(230,160,90)" transform="rotate(${this.tilt}, 0, 0)" />
				`;case"meds":return`
					<ellipse cx="0" cy="0" rx="16" ry="16" fill="rgb(200,200,200)" />
				`;case"poop":{const t="rgb(50,30,0)";return`
					<ellipse cx="0" cy="-10" rx="10" ry="20" fill="${t}" transform="rotate(${this.tilt}, 0, 0)" />
					<ellipse cx="0" cy="0" rx="20" ry="10" fill="${t}" />
					<ellipse cx="0" cy="10" rx="40" ry="10" fill="${t}" />	
				`}default:return`
					<ellipse cx="0" cy="0" rx="20" ry="20" fill="rgb(200,200,200)"
						stroke="transparent" />
					<ellipse cx="0" cy="20" rx="20" ry="20" fill="rgb(200,200,200)"
						stroke="transparent" />
				`}}getSvg(){const t=this.getOpacity();return`<g class="item item-${this.type}"
					transform="translate(${this.pos.x},${this.pos.y})"
					style="filter:url(#shadow);"
					opacity="${t}"
					data-itemid="${this.id}">
					${this.getTypeSvg()}
				</g>`}}const gt=50,S={showGutter:!0,showStats:!0},h={size:new c(1e3,1e3),halfSize:new c(500,500),gutterRadius:1e3,isLightsOn:!0},B=new c,l=new ct,W=new et(Pt);let z,K=[];const m=[],p={},dt="poop",k=0,L=1,M=2;let x=k;const X="pet",j="come",ft="sit";let pt=j;const mt="snack",J="needle",Q="deathray";let O=X,H=mt,A=J;function D(i){return document.querySelectorAll(i)}function yt(){document.addEventListener("DOMContentLoaded",bt)}function xt(){l.put(h.halfSize.x,h.halfSize.y),l.assignRandomTarget(h.size)}function wt(){h.size.set({x:window.innerWidth,y:window.innerHeight}),h.halfSize=h.size.getMultiply(.5),h.gutterRadius=Math.min(h.size.x,h.size.y)/2.4}function bt(){z=D("#display-content")[0];const i=t=>{p[t]=D(`.${t}`)[0]};["activate-food","activate-command","activate-tool","info-left","info-right","splash"].forEach(i),p.splash.addEventListener("click",t=>{t.preventDefault(),t.stopPropagation();const e=D("#display")[0];St(e),vt()})}function St(i){let t={item:null,pos:null,initialPos:null};function e(r){console.log("click");const{target:a}=r;if(a.matches(".activate-food")?b(k):a.matches(".activate-command")?b(L):a.matches(".activate-tool")?b(M):a.matches(".open-sub")?E(a):a.matches(".select-command")?(O=a.dataset.type,b(L),E(a)):a.matches(".select-food")?(H=a.dataset.type,b(k),E(a)):a.matches(".select-tool")?(A=a.dataset.type,b(M),E(a)):a.matches(".toggle-lights")?h.isLightsOn=document.body.classList.toggle("lights-on"):a.matches(".toggle-stats")?(S.showStats=!S.showStats,C()):a.matches(".toggle-gutter")?S.showGutter=!S.showGutter:a.matches(".toggle-pause")?W.toggle():a.matches(".reset-game")&&window.location.reload(),a.matches("button"))return;if(a.closest(".item")){console.log("item click");return}const g=!!a.closest(".monster"),y=P(r);Tt(x,y,g)}function s(r){r.preventDefault();const{target:a}=r;Y(t,n,o);const g=a.closest(".item");if(!g)return e(r);const y=P(r);Mt(t,a,g,y,n,o),console.log("item picked up",t)}function n(r){if(r.preventDefault(),!t.item)return;const a=P(r),g=a.clone().subtract(t.pos);t.item.pos.add(g),t.pos.set(a),x===M&&$t(x,A,t.item)}function o(r){r.preventDefault(),Y(t,n,o)}i.addEventListener("touchstart",s),i.addEventListener("touchend",o),i.addEventListener("touchmove",n),i.addEventListener("mousedown",s),i.addEventListener("mouseup",o),i.addEventListener("mousemove",n),document.addEventListener("click",e)}function P(i){let t,e;return i.type==="touchstart"||i.type==="touchmove"?(t=i.touches[0].clientX,e=i.touches[0].clientY):(t=i.clientX,e=i.clientY),new c(t,e)}function Mt(i,t,e,s,n,o){const r=Number(e.dataset.itemid);i.target=t,i.itemElt=e,i.item=m.find(a=>a.id===r),i.pos=s.clone(),i.initialPos=s.clone(),console.log(r,i.item),t.addEventListener("touchmove",n),t.addEventListener("touchend",o)}function Y(i,t,e){i.item&&(console.log("drop"),i.target.removeEventListener("touchmove",t),i.target.removeEventListener("touchend",e),i.item=null,i.pos=null)}function E(i){i.closest(".main-list > li").querySelector(".sub-list").classList.toggle("open"),C()}function b(i){x=i,C()}function Tt(i,t,e){switch(console.log("doAction",i,H,O),i){case k:{Ot(t,H);break}case L:{switch(O){case X:{e&&l.pet();break}case j:{l.come(t);break}case ft:{l.sit();break}}break}case M:{switch(A){case J:{e&&l.vaccinate();break}case Q:{e&&l.damage(255);break}}break}}}function $t(i,t,e){i===M&&t===Q&&e.zap(1)}function vt(){document.body.classList.add("begin"),wt(),xt(),Z(),C(),W.start()}function kt(i,t="",e=""){let s=`<g class="${t}" transform="${i.getTransformStyle(B)}" x="${i.pos.x}" y="${i.pos.y}">`;return i.parts.forEach(n=>{s+=Ct(`${n.name} ${e}`,n)}),s+="</g>",s}function Ct(i,t){return`<polygon class="${i}" points="${t.getPointsString()}" />`}function Et(){let i="";return K.forEach(t=>{i+=kt(t,"particle")}),i}function Lt(i){m.push(new U(i,dt))}function Ot(i,t){if(m.length>=gt)return!1;const e=new U(i,t);m.push(e)}function Ht(i=[]){return i.reduce((t,e)=>t+e.getSvg(),"")}function At(i=[],t,e){i.forEach(s=>{Rt(s)&&s.decay(t)}),Vt(i)}function Rt(i){return i.pos.x<h.halfSize.x-h.gutterRadius||i.pos.x>h.halfSize.x+h.gutterRadius||i.pos.y<h.halfSize.y-h.gutterRadius||i.pos.y>h.halfSize.y+h.gutterRadius}function Vt(i=[]){const t=i.findIndex(e=>e.isDecayed());t>-1&&i.splice(t,1)}function Nt(){return S.showGutter?`
		<rect x="${h.halfSize.x-h.gutterRadius}" y="${h.halfSize.y-h.gutterRadius}"
			rx="10" ry="10"
			width="${h.gutterRadius*2}" height="${h.gutterRadius*2}"
			fill="transparent" stroke="rgba(0,0,0,0.1)" stroke-width="5" />
	`:""}function Z(){z.innerHTML=Nt()+l.getSvg(B)+Ht(m)+Et(),z.setAttribute("viewBox",`0 0 ${h.size.x} ${h.size.y}`)}function It(){return S.showStats?`<ul>
		<li>${l.getLifecycleName()}</li>
		<li>Age: ${l.getAge()}</li>
		<li>Happiness: ${Math.round(l.happiness)}</li>
		<li>Hunger: ${Math.round(l.hunger)}</li>
		<li>Energy: ${Math.round(l.energy)}</li>
		<li>Health: ${Math.round(l.health)}</li>
		<li>Vaccination: ${Math.round(l.vaccination)}</li>
		<li>Sickness: ${Math.round(l.sickness)}</li>
		<li>Sick Chance: ${Math.round(l.lastChanceOfSickness)}%</li>
		<li>Bowels: ${Math.round(l.bowels)}</li>
		<li>Digestion: ${Math.round(l.digestionCooldown)}</li>
		<li>Cooldown: ${Math.round(l.actionCooldown)}</li>
	</ul>`:`<ul><li>${l.getLifecycleName()}</li></ul>`}function C(){p["activate-food"].classList.toggle("active",x===k),p["activate-command"].classList.toggle("active",x===L),p["activate-tool"].classList.toggle("active",x===M),p["info-left"].innerHTML=Dt(l.getStatuses()),p["info-right"].innerHTML=It(),p["activate-command"].innerHTML=O,p["activate-food"].innerHTML=H,p["activate-tool"].innerHTML=A}function Dt(i){return`<ul>${i.reduce((e,s)=>e+s.getHtml("li"),"")}</ul>`}function Pt(i,t){let e=!1;return l.advance(i,t,h.size,m,pt,h),l.poop(i)&&Lt(l.pos.clone().add({x:0,y:120})),At(m,i),Z(),t%50===0&&C(),e}const tt=(function(){return yt(),{monster:l,items:m,world:h,particles:K,loop:W}})();console.log(tt);window&&(window.g=tt);
